import streamlit as st
import pandas as pd
import re
import io
from datetime import datetime
from reportlab.lib.pagesizes import A4
from reportlab.lib.units import mm
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import (
    SimpleDocTemplate, Paragraph, Spacer, PageBreak, Table, TableStyle
)
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont

# ===== ƒêƒÇNG K√ù FONT ARIAL =====
pdfmetrics.registerFont(TTFont("Arial", "fonts/arial.ttf"))
pdfmetrics.registerFont(TTFont("Arial-Bold", "fonts/arialbd.ttf"))
# pdfmetrics.registerFont(TTFont("Arial", "C:/Windows/Fonts/arial.ttf"))
# pdfmetrics.registerFont(TTFont("Arial-Bold", "C:/Windows/Fonts/arialbd.ttf"))

# ===== FORMAT TI·ªÄN =====
def format_currency(value):
    return f"{value:,.0f}".replace(",", ".")

# ===== S·∫ÆP X·∫æP T√äN PH√íNG =====
def sort_phong_key(phong):
    match_obj = re.match(r"(\d+)([A-Za-z]*)", str(phong))
    if match_obj:
        so = int(match_obj.group(1))
        chu = match_obj.group(2)
        return (so, chu)
    return (phong, "")

# ===== SESSION =====
if "ds_phong" not in st.session_state:
    st.session_state["ds_phong"] = []

st.title("üè† Qu·∫£n l√Ω ti·ªÅn ph√≤ng tr·ªç")

# ===== GI√Å C·ªê ƒê·ªäNH =====
st.sidebar.header("‚öôÔ∏è C√†i ƒë·∫∑t gi√°")
TIEN_PHONG_CO_DINH = st.sidebar.number_input("üíµ Ti·ªÅn ph√≤ng c·ªë ƒë·ªãnh", min_value=0, value=2100000, step=100000)
GIA_DIEN = st.sidebar.number_input("‚ö° Gi√° ƒëi·ªán (1 kWh)", min_value=0, value=3500, step=500)
GIA_NUOC = st.sidebar.number_input("üö∞ Gi√° n∆∞·ªõc (1 m¬≥)", min_value=0, value=20000, step=1000)
TIEN_RAC = st.sidebar.number_input("üóëÔ∏è Ti·ªÅn r√°c", min_value=0, value=10000, step=1000)

# ===== NH·∫¨P D·ªÆ LI·ªÜU =====
st.header("‚ûï Nh·∫≠p th√¥ng tin ph√≤ng")

ten_phong = st.text_input("T√™n ph√≤ng (t·ª± do nh·∫≠p ch·ªØ/s·ªë)")

dien_cu = st.number_input("Ch·ªâ s·ªë ƒëi·ªán c≈©", min_value=0, step=1)
dien_moi_input = st.number_input("Ch·ªâ s·ªë ƒëi·ªán m·ªõi", min_value=0, step=1)
dien_moi_thuc = dien_moi_input if dien_moi_input >= dien_cu else dien_moi_input + 1000
so_dien = max(0, dien_moi_thuc - dien_cu)
tien_dien = so_dien * GIA_DIEN

nuoc_cu = st.number_input("Ch·ªâ s·ªë n∆∞·ªõc c≈©", min_value=0, step=1)
nuoc_moi_input = st.number_input("Ch·ªâ s·ªë n∆∞·ªõc m·ªõi", min_value=0, step=1)
nuoc_moi_thuc = nuoc_moi_input if nuoc_moi_input >= nuoc_cu else nuoc_moi_input + 1000
so_nuoc = max(0, nuoc_moi_thuc - nuoc_cu)
tien_nuoc = so_nuoc * GIA_NUOC

tong = TIEN_PHONG_CO_DINH + tien_dien + tien_nuoc + TIEN_RAC

if st.button("üíæ L∆∞u ph√≤ng"):
    if ten_phong.strip() == "":
        st.warning("‚ö†Ô∏è B·∫°n ph·∫£i nh·∫≠p t√™n ph√≤ng tr∆∞·ªõc khi l∆∞u!")
    else:
        record = {
            "Ph√≤ng": ten_phong,
            "Ti·ªÅn ph√≤ng": TIEN_PHONG_CO_DINH,
            "ƒê∆°n gi√° ƒëi·ªán": GIA_DIEN,
            "S·ªë ƒëi·ªán c≈©": dien_cu,
            "S·ªë ƒëi·ªán m·ªõi": dien_moi_input,
            "S·ªë ƒëi·ªán s·ª≠ d·ª•ng (kWh)": so_dien,
            "Ti·ªÅn ƒëi·ªán": tien_dien,
            "ƒê∆°n gi√° n∆∞·ªõc": GIA_NUOC,
            "S·ªë n∆∞·ªõc c≈©": nuoc_cu,
            "S·ªë n∆∞·ªõc m·ªõi": nuoc_moi_input,
            "S·ªë n∆∞·ªõc s·ª≠ d·ª•ng (m¬≥)": so_nuoc,
            "Ti·ªÅn n∆∞·ªõc": tien_nuoc,
            "Ti·ªÅn r√°c": TIEN_RAC,
            "T·ªïng ti·ªÅn": tong
        }

        found = False
        for i, p in enumerate(st.session_state["ds_phong"]):
            if p["Ph√≤ng"].lower() == ten_phong.lower():
                st.session_state["ds_phong"][i] = record
                found = True
                st.info(f"‚úèÔ∏è ƒê√£ c·∫≠p nh·∫≠t l·∫°i th√¥ng tin ph√≤ng {ten_phong}")
                break

        if not found:
            st.session_state["ds_phong"].append(record)
            st.success(f"‚úÖ ƒê√£ l∆∞u ph√≤ng {ten_phong}")

# ===== HI·ªÇN TH·ªä DANH S√ÅCH =====
if st.session_state["ds_phong"]:
    df = pd.DataFrame(st.session_state["ds_phong"])
    df["__sort_key__"] = df["Ph√≤ng"].map(sort_phong_key)
    df = df.sort_values("__sort_key__").drop(columns="__sort_key__").reset_index(drop=True)

    df_display = df.copy()
    for col in ["Ti·ªÅn ph√≤ng", "ƒê∆°n gi√° ƒëi·ªán", "ƒê∆°n gi√° n∆∞·ªõc",
                "Ti·ªÅn ƒëi·ªán", "Ti·ªÅn n∆∞·ªõc", "Ti·ªÅn r√°c", "T·ªïng ti·ªÅn"]:
        df_display[col] = df_display[col].apply(format_currency)

    st.header("üìä B·∫£ng t·ªïng h·ª£p ti·ªÅn ph√≤ng")
    df_display = df_display.set_index("Ph√≤ng")
    st.dataframe(df_display)

    tong_tien_all = df["T·ªïng ti·ªÅn"].sum()
    st.subheader(f"üí∞ T·ªïng thu t·∫•t c·∫£ ph√≤ng: {format_currency(tong_tien_all)}")

    # ===== XU·∫§T PDF =====
    if st.button("üßæ Xu·∫•t H√≥a ƒê∆°n"):
        thermal_width = 58 * mm
        thermal_height = 100 * mm
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(
            buffer,
            pagesize=(thermal_width, thermal_height),
            leftMargin=5 * mm,
            rightMargin=5 * mm,
            topMargin=5 * mm,
            bottomMargin=5 * mm
        )
        elements = []

        # Style setup
        styles = getSampleStyleSheet()
        styles["Normal"].fontName = "Arial"
        styles["Normal"].fontSize = 10
        styles["Normal"].spaceAfter = 2
        styles.add(ParagraphStyle(name="BillTitle", fontName="Arial-Bold", fontSize=12, alignment=1, spaceAfter=6))
        styles.add(ParagraphStyle(name="TotalBold", fontName="Arial-Bold", fontSize=12, alignment=1, spaceAfter=6))
        styles.add(ParagraphStyle(name="TotalNum", fontName="Arial-Bold", fontSize=16, alignment=1, spaceAfter=6))


        for idx, row in df.iterrows():
            # Ti√™u ƒë·ªÅ
            elements.append(Paragraph(f"<b>PHI·∫æU THU TI·ªÄN PH√íNG {row['Ph√≤ng'].upper()}</b>", styles["BillTitle"]))
            elements.append(Spacer(1, 6))

            # N·ªôi dung t·ª´ng d√≤ng
            elements.append(Paragraph(f"Ti·ªÅn ph√≤ng: {format_currency(row['Ti·ªÅn ph√≤ng'])}ƒë", styles["Normal"]))
            elements.append(Spacer(1, 6))

            elements.append(Paragraph(f"ƒêi·ªán c≈©: {row['S·ªë ƒëi·ªán c≈©']}", styles["Normal"]))
            elements.append(Paragraph(f"ƒêi·ªán m·ªõi: {row['S·ªë ƒëi·ªán m·ªõi']}", styles["Normal"]))
            elements.append(Paragraph(f"Ti√™u th·ª•: {row['S·ªë ƒëi·ªán s·ª≠ d·ª•ng (kWh)']} kWh", styles["Normal"]))
            elements.append(Paragraph(f"Ti·ªÅn ƒëi·ªán: {format_currency(row['Ti·ªÅn ƒëi·ªán'])}ƒë", styles["Normal"]))
            elements.append(Spacer(1, 6))

            elements.append(Paragraph(f"N∆∞·ªõc c≈©: {row['S·ªë n∆∞·ªõc c≈©']}", styles["Normal"]))
            elements.append(Paragraph(f"N∆∞·ªõc m·ªõi: {row['S·ªë n∆∞·ªõc m·ªõi']}", styles["Normal"]))
            elements.append(Paragraph(f"Ti√™u th·ª•: {row['S·ªë n∆∞·ªõc s·ª≠ d·ª•ng (m¬≥)']} m¬≥", styles["Normal"]))
            elements.append(Paragraph(f"Ti·ªÅn n∆∞·ªõc: {format_currency(row['Ti·ªÅn n∆∞·ªõc'])}ƒë", styles["Normal"]))
            elements.append(Spacer(1, 6))

            elements.append(Paragraph(f"Ti·ªÅn r√°c: {format_currency(row['Ti·ªÅn r√°c'])}ƒë", styles["Normal"]))
            elements.append(Spacer(1, 6))

            # elements.append(Paragraph(f"<b>T·ªîNG C·ªòNG: {format_currency(row['T·ªïng ti·ªÅn'])}</b> ƒë", styles["Normal"]))
            elements.append(Paragraph(f"<b>T·ªîNG C·ªòNG:</b>", styles["TotalBold"]))
            elements.append(Paragraph(f"{format_currency(row['T·ªïng ti·ªÅn'])}ƒë", styles["TotalNum"]))
            elements.append(Spacer(1, 6))

            # Trang m·ªõi cho m·ªói ph√≤ng
            if idx < len(df) - 1:
                elements.append(PageBreak())

        doc.build(elements)
        buffer.seek(0)

        st.download_button(
            label="‚¨áÔ∏è T·∫£i file PDF",
            data=buffer,
            file_name=f"phieu_thu_tien_nha_tro_{datetime.now().strftime('%m-%Y')}.pdf",
            mime="application/pdf"
        )
