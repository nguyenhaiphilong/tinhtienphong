from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
import streamlit as st
import pandas as pd
import re
from datetime import datetime
import io
import os

# ===== ƒêƒÇNG K√ù FONT ARIAL =====
pdfmetrics.registerFont(TTFont("Arial", "fonts/arial.ttf"))
pdfmetrics.registerFont(TTFont("Arial-Bold", "fonts/arialbd.ttf"))

# ===== FORMAT TI·ªÄN =====
def format_currency(value):
    return f"{value:,.0f}".replace(",", ".")

# ===== S·∫ÆP X·∫æP T√äN PH√íNG =====
def sort_phong_key(phong):
    match_obj = re.match(r"(\d+)([A-Za-z]*)", str(phong))
    if match_obj:
        so = int(match_obj.group(1))
        chu = match_obj.group(2)
        return (so, chu)
    return (phong, "")

# ===== SESSION =====
if "ds_phong" not in st.session_state:
    st.session_state["ds_phong"] = []

st.title("üè† Qu·∫£n l√Ω ti·ªÅn ph√≤ng tr·ªç")

# ===== GI√Å C·ªê ƒê·ªäNH =====
st.sidebar.header("‚öôÔ∏è C√†i ƒë·∫∑t gi√°")
TIEN_PHONG_CO_DINH = st.sidebar.number_input("üíµ Ti·ªÅn ph√≤ng c·ªë ƒë·ªãnh", min_value=0, value=2100000, step=50000)
GIA_DIEN = st.sidebar.number_input("‚ö° Gi√° ƒëi·ªán (1 kWh)", min_value=0, value=3000, step=100)
GIA_NUOC = st.sidebar.number_input("üö∞ Gi√° n∆∞·ªõc (1 m¬≥)", min_value=0, value=15000, step=500)
TIEN_RAC = st.sidebar.number_input("üóëÔ∏è Ti·ªÅn r√°c", min_value=0, value=10000, step=1000)

# ===== NH·∫¨P D·ªÆ LI·ªÜU =====
st.header("‚ûï Nh·∫≠p th√¥ng tin ph√≤ng")

ten_phong = st.text_input("T√™n ph√≤ng (t·ª± do nh·∫≠p ch·ªØ/s·ªë)")

dien_cu = st.number_input("Ch·ªâ s·ªë ƒëi·ªán c≈©", min_value=0, step=1)
dien_moi_input = st.number_input("Ch·ªâ s·ªë ƒëi·ªán m·ªõi", min_value=0, step=1)
dien_moi_thuc = dien_moi_input if dien_moi_input >= dien_cu else dien_moi_input + 1000
so_dien = max(0, dien_moi_thuc - dien_cu)
tien_dien = so_dien * GIA_DIEN

nuoc_cu = st.number_input("Ch·ªâ s·ªë n∆∞·ªõc c≈©", min_value=0, step=1)
nuoc_moi_input = st.number_input("Ch·ªâ s·ªë n∆∞·ªõc m·ªõi", min_value=0, step=1)
nuoc_moi_thuc = nuoc_moi_input if nuoc_moi_input >= nuoc_cu else nuoc_moi_input + 1000
so_nuoc = max(0, nuoc_moi_thuc - nuoc_cu)
tien_nuoc = so_nuoc * GIA_NUOC

tong = TIEN_PHONG_CO_DINH + tien_dien + tien_nuoc + TIEN_RAC

if st.button("üíæ L∆∞u ph√≤ng"):
    if ten_phong.strip() == "":
        st.warning("‚ö†Ô∏è B·∫°n ph·∫£i nh·∫≠p t√™n ph√≤ng tr∆∞·ªõc khi l∆∞u!")
    else:
        record = {
            "Ph√≤ng": ten_phong,
            "ƒê∆°n gi√° ph√≤ng": TIEN_PHONG_CO_DINH,
            "ƒê∆°n gi√° ƒëi·ªán": GIA_DIEN,
            "S·ªë ƒëi·ªán c≈©": dien_cu,
            "S·ªë ƒëi·ªán m·ªõi": dien_moi_input,
            "S·ªë ƒëi·ªán s·ª≠ d·ª•ng (kWh)": so_dien,
            "Ti·ªÅn ƒëi·ªán": tien_dien,
            "ƒê∆°n gi√° n∆∞·ªõc": GIA_NUOC,
            "S·ªë n∆∞·ªõc c≈©": nuoc_cu,
            "S·ªë n∆∞·ªõc m·ªõi": nuoc_moi_input,
            "S·ªë n∆∞·ªõc s·ª≠ d·ª•ng (m¬≥)": so_nuoc,
            "Ti·ªÅn n∆∞·ªõc": tien_nuoc,
            "Ti·ªÅn ph√≤ng": TIEN_PHONG_CO_DINH,
            "Ti·ªÅn r√°c": TIEN_RAC,
            "T·ªïng ti·ªÅn": tong
        }

        found = False
        for i, p in enumerate(st.session_state["ds_phong"]):
            if p["Ph√≤ng"].lower() == ten_phong.lower():
                st.session_state["ds_phong"][i] = record
                found = True
                st.info(f"‚úèÔ∏è ƒê√£ c·∫≠p nh·∫≠t l·∫°i th√¥ng tin ph√≤ng {ten_phong}")
                break

        if not found:
            st.session_state["ds_phong"].append(record)
            st.success(f"‚úÖ ƒê√£ l∆∞u ph√≤ng {ten_phong}")

# ===== HI·ªÇN TH·ªä DANH S√ÅCH =====
if st.session_state["ds_phong"]:
    df = pd.DataFrame(st.session_state["ds_phong"])
    df["__sort_key__"] = df["Ph√≤ng"].map(sort_phong_key)
    df = df.sort_values("__sort_key__").drop(columns="__sort_key__").reset_index(drop=True)

    df_display = df.copy()
    for col in ["ƒê∆°n gi√° ph√≤ng", "ƒê∆°n gi√° ƒëi·ªán", "ƒê∆°n gi√° n∆∞·ªõc",
                "Ti·ªÅn ph√≤ng", "Ti·ªÅn ƒëi·ªán", "Ti·ªÅn n∆∞·ªõc", "Ti·ªÅn r√°c", "T·ªïng ti·ªÅn"]:
        df_display[col] = df_display[col].apply(format_currency)

    st.header("üìä B·∫£ng t·ªïng h·ª£p ti·ªÅn ph√≤ng")
    st.dataframe(df_display)

    tong_tien_all = df["T·ªïng ti·ªÅn"].sum()
    st.subheader(f"üí∞ T·ªïng thu t·∫•t c·∫£ ph√≤ng: {format_currency(tong_tien_all)}")

    # ===== XU·∫§T PDF =====
    if st.button("üßæ Xu·∫•t PDF H√≥a ƒë∆°n"):
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4)
        elements = []

        styles = getSampleStyleSheet()
        styles.add(ParagraphStyle(name="Arial", fontName="Arial-Bold", fontSize=12))
        styles.add(ParagraphStyle(name="ArialTitle", fontName="Arial", fontSize=16, alignment=1))

        for _, row in df.iterrows():
            elements.append(Paragraph(f"TI·ªÄN PH√íNG {row['Ph√≤ng']}", styles["ArialTitle"]))
            elements.append(Spacer(1, 12))

            data = [
                ["N·ªôi dung", "S·ªë c≈©", "S·ªë m·ªõi", "Ti√™u th·ª•", "ƒê∆°n gi√°", "Th√†nh ti·ªÅn"],
                ["Ti·ªÅn ph√≤ng", "-", "-", "-", format_currency(row["ƒê∆°n gi√° ph√≤ng"]), format_currency(row["Ti·ªÅn ph√≤ng"])],
                ["ƒêi·ªán (kWh)", row["S·ªë ƒëi·ªán c≈©"], row["S·ªë ƒëi·ªán m·ªõi"], row["S·ªë ƒëi·ªán s·ª≠ d·ª•ng (kWh)"], 
                 format_currency(row["ƒê∆°n gi√° ƒëi·ªán"]), format_currency(row["Ti·ªÅn ƒëi·ªán"])],
                ["N∆∞·ªõc (m¬≥)", row["S·ªë n∆∞·ªõc c≈©"], row["S·ªë n∆∞·ªõc m·ªõi"], row["S·ªë n∆∞·ªõc s·ª≠ d·ª•ng (m¬≥)"], 
                 format_currency(row["ƒê∆°n gi√° n∆∞·ªõc"]), format_currency(row["Ti·ªÅn n∆∞·ªõc"])],
                ["R√°c", "-", "-", "-", "-", format_currency(row["Ti·ªÅn r√°c"])],
                ["T·ªîNG C·ªòNG", "", "", "", "", format_currency(row["T·ªïng ti·ªÅn"])]
            ]

            table = Table(data, colWidths=[90, 60, 60, 60, 80, 100])
            table.setStyle(TableStyle([
                ("BACKGROUND", (0, 0), (-1, 0), colors.grey),
                ("TEXTCOLOR", (0, 0), (-1, 0), colors.whitesmoke),
                ("ALIGN", (0, 0), (-1, -1), "CENTER"),
                ("GRID", (0, 0), (-1, -1), 1, colors.black),
                ("FONTNAME", (0, 0), (-1, -1), "Arial"),
                ("BACKGROUND", (0, 1), (-1, -1), colors.beige),
            ]))
            elements.append(table)
            elements.append(Spacer(1, 24))

        doc.build(elements)
        buffer.seek(0)

        st.download_button(
            label="‚¨áÔ∏è T·∫£i file PDF",
            data=buffer,
            file_name=f"hoa_don_phong_{datetime.now().strftime('%m-%Y')}.pdf",
            mime="application/pdf"
        )
