import streamlit as st
import pandas as pd
import re
import io
from datetime import datetime
from reportlab.lib.pagesizes import A4
from reportlab.lib.units import mm
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import (
    SimpleDocTemplate, Paragraph, Spacer, PageBreak, Table, TableStyle
)
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont

# ===== ƒêƒÇNG K√ù FONT ARIAL =====
pdfmetrics.registerFont(TTFont("Arial", "fonts/arial.ttf"))
pdfmetrics.registerFont(TTFont("Arial-Bold", "fonts/arialbd.ttf"))
# pdfmetrics.registerFont(TTFont("Arial", "C:/Windows/Fonts/arial.ttf"))
# pdfmetrics.registerFont(TTFont("Arial-Bold", "C:/Windows/Fonts/arialbd.ttf"))

# ------------------ Helpers ------------------
def parse_room(name):
    s = str(name).strip()
    m = re.match(r"^(\d+)\s*([A-Za-z]*)$", s)
    if m:
        num = int(m.group(1))
        suf = (m.group(2) or "").upper()
        return num, suf
    return 9999, s

def format_currency(value):
    try:
        v = float(value)
    except:
        return str(value)
    return f"{v:,.0f} ƒë".replace(",", ".")

def build_sort_rank(df):
    # parse num & suffix
    df['__num'] = df['Ph√≤ng'].apply(lambda x: parse_room(x)[0])
    df['__suf'] = df['Ph√≤ng'].apply(lambda x: parse_room(x)[1])
    # l·∫•y danh s√°ch suffix c√≥ (kh√¥ng t√≠nh '')
    suffixes = sorted(list(set([s for s in df['__suf'].unique() if s != ""])))
    # rank map: '' -> 0, suffixes in alphabetical order -> 1,2,3...
    rank_map = {"": 0}
    for i, s in enumerate(suffixes):
        rank_map[s] = i + 1
    df['__rank'] = df['__suf'].map(lambda x: rank_map.get(x, 9999))
    # sort theo rank r·ªìi theo s·ªë
    df_sorted = df.sort_values(['__rank', '__num']).reset_index(drop=True)
    return df_sorted

# ------------------ Session ------------------
if "ds_phong" not in st.session_state:
    st.session_state["ds_phong"] = []

if "config" not in st.session_state:
    st.session_state["config"] = {
        "TIEN_PHONG": 2100000,
        "GIA_DIEN": 3500,
        "GIA_NUOC": 20000,
        "TIEN_RAC": 10000,
    }

st.title("üè† Qu·∫£n l√Ω ti·ªÅn ph√≤ng tr·ªç")

# ---------- Sidebar: c·∫•u h√¨nh ----------
st.sidebar.header("‚öôÔ∏è C·∫•u h√¨nh gi√°")
st.session_state["config"]["TIEN_PHONG"] = st.sidebar.number_input(
    "üíµ Ti·ªÅn ph√≤ng c·ªë ƒë·ªãnh", min_value=0, step=1000, value=st.session_state["config"]["TIEN_PHONG"]
)
st.session_state["config"]["GIA_DIEN"] = st.sidebar.number_input(
    "üîå Gi√° ƒëi·ªán (ƒë/kWh)", min_value=0, step=100, value=st.session_state["config"]["GIA_DIEN"]
)
st.session_state["config"]["GIA_NUOC"] = st.sidebar.number_input(
    "üö∞ Gi√° n∆∞·ªõc (ƒë/m¬≥)", min_value=0, step=1000, value=st.session_state["config"]["GIA_NUOC"]
)
st.session_state["config"]["TIEN_RAC"] = st.sidebar.number_input(
    "üóëÔ∏è Ti·ªÅn r√°c", min_value=0, step=1000, value=st.session_state["config"]["TIEN_RAC"]
)

# ---------- Nh·∫≠p d·ªØ li·ªáu ph√≤ng ----------
st.header("‚ûï Nh·∫≠p th√¥ng tin ph√≤ng")

ten_phong = st.text_input("T√™n ph√≤ng")

dien_cu = st.number_input("Ch·ªâ s·ªë ƒëi·ªán c≈©", min_value=0, step=1)
dien_moi_input = st.number_input("Ch·ªâ s·ªë ƒëi·ªán m·ªõi", min_value=0, step=1)
# x·ª≠ l√Ω quay v√≤ng: c·ªông 1000 n·∫øu m·ªõi < c≈©
dien_moi_thuc = dien_moi_input if dien_moi_input >= dien_cu else dien_moi_input + 1000
so_dien = max(0, dien_moi_thuc - dien_cu)
tien_dien = so_dien * st.session_state["config"]["GIA_DIEN"]

nuoc_cu = st.number_input("Ch·ªâ s·ªë n∆∞·ªõc c≈©", min_value=0, step=1)
nuoc_moi_input = st.number_input("Ch·ªâ s·ªë n∆∞·ªõc m·ªõi", min_value=0, step=1)
nuoc_moi_thuc = nuoc_moi_input if nuoc_moi_input >= nuoc_cu else nuoc_moi_input + 1000
so_nuoc = max(0, nuoc_moi_thuc - nuoc_cu)
tien_nuoc = so_nuoc * st.session_state["config"]["GIA_NUOC"]

tong = st.session_state["config"]["TIEN_PHONG"] + tien_dien + tien_nuoc + st.session_state["config"]["TIEN_RAC"]

if st.button("üíæ L∆∞u ph√≤ng"):
    if ten_phong.strip() == "":
        st.warning("‚ö†Ô∏è B·∫°n ph·∫£i nh·∫≠p t√™n ph√≤ng tr∆∞·ªõc khi l∆∞u!")
    else:
        record = {
            "Ph√≤ng": ten_phong.strip(),
            "Ti·ªÅn ph√≤ng": st.session_state["config"]["TIEN_PHONG"],
            "ƒê∆°n gi√° ƒëi·ªán": st.session_state["config"]["GIA_DIEN"],
            "S·ªë ƒëi·ªán c≈©": dien_cu,
            "S·ªë ƒëi·ªán m·ªõi": dien_moi_input,
            "S·ªë ƒëi·ªán s·ª≠ d·ª•ng (kWh)": so_dien,
            "Ti·ªÅn ƒëi·ªán": tien_dien,
            "ƒê∆°n gi√° n∆∞·ªõc": st.session_state["config"]["GIA_NUOC"],
            "S·ªë n∆∞·ªõc c≈©": nuoc_cu,
            "S·ªë n∆∞·ªõc m·ªõi": nuoc_moi_input,
            "S·ªë n∆∞·ªõc s·ª≠ d·ª•ng (m¬≥)": so_nuoc,
            "Ti·ªÅn n∆∞·ªõc": tien_nuoc,
            "Ti·ªÅn r√°c": st.session_state["config"]["TIEN_RAC"],
            "T·ªïng ti·ªÅn": tong
        }
        # c·∫≠p nh·∫≠t n·∫øu tr√πng t√™n (ghi ƒë√®) ho·∫∑c th√™m m·ªõi
        found = False
        for i, p in enumerate(st.session_state["ds_phong"]):
            if p["Ph√≤ng"].lower() == ten_phong.lower():
                st.session_state["ds_phong"][i] = record
                found = True
                st.info(f"‚úèÔ∏è ƒê√£ c·∫≠p nh·∫≠t l·∫°i th√¥ng tin ph√≤ng {ten_phong}")
                break
        if not found:
            st.session_state["ds_phong"].append(record)
            st.success(f"‚úÖ ƒê√£ l∆∞u ph√≤ng {ten_phong}")

# ---------- Hi·ªÉn th·ªã & xu·∫•t ----------
if st.session_state["ds_phong"]:
    df = pd.DataFrame(st.session_state["ds_phong"])

    # t·∫°o c·ªôt s·ªë & suffix v√† rank theo nh√≥m (s·∫Øp x·∫øp theo y√™u c·∫ßu)
    df_sorted = build_sort_rank(df)

    # chu·∫©n b·ªã hi·ªÉn th·ªã (format ti·ªÅn)
    df_display = df_sorted.copy()
    money_cols = ["Ti·ªÅn ph√≤ng", "ƒê∆°n gi√° ƒëi·ªán", "Ti·ªÅn ƒëi·ªán", "ƒê∆°n gi√° n∆∞·ªõc", "Ti·ªÅn n∆∞·ªõc", "Ti·ªÅn r√°c", "T·ªïng ti·ªÅn"]
    for col in money_cols:
        if col in df_display.columns:
            df_display[col] = df_display[col].apply(format_currency)

    st.header("üìä B·∫£ng t·ªïng h·ª£p ti·ªÅn ph√≤ng (ƒë√£ s·∫Øp x·∫øp theo quy t·∫Øc)")
    st.dataframe(df_display.drop(columns=['__num','__suf','__rank'], errors='ignore'))

    # t·ªïng
    tong_tien_all = df_sorted["T·ªïng ti·ªÅn"].sum()
    st.subheader(f"üí∞ T·ªïng thu t·∫•t c·∫£ ph√≤ng: {format_currency(tong_tien_all)}")

    # ----- Xu·∫•t PDF cho t·∫•t c·∫£ ph√≤ng -----
    if st.button("üßæ Xu·∫•t PDF (t·∫•t c·∫£ ph√≤ng)"):
        pdf_buffer = io.BytesIO()
        thermal_width = 58 * mm
        thermal_height = 100 * mm
        doc = SimpleDocTemplate(
            pdf_buffer,
            pagesize=(thermal_width, thermal_height),
            leftMargin=5 * mm,
            rightMargin=5 * mm,
            topMargin=5 * mm,
            bottomMargin=5 * mm
        )
        elements = []

        # Style setup
        styles = getSampleStyleSheet()
        styles["Normal"].fontName = "Arial"
        styles["Normal"].fontSize = 10
        styles["Normal"].spaceAfter = 2
        styles.add(ParagraphStyle(name="BillTitle", fontName="Arial-Bold", fontSize=12, alignment=1, spaceAfter=6))
        styles.add(ParagraphStyle(name="TotalBold", fontName="Arial-Bold", fontSize=12, alignment=1, spaceAfter=6))
        styles.add(ParagraphStyle(name="TotalNum", fontName="Arial-Bold", fontSize=16, alignment=1, spaceAfter=6))

        # duy·ªát theo df_sorted ƒë·ªÉ ƒë·∫£m b·∫£o th·ª© t·ª± ƒë√∫ng
        for idx, row in df_sorted.iterrows():
            # Ti√™u ƒë·ªÅ
            elements.append(Paragraph(f"<b>PHI·∫æU THU TI·ªÄN PH√íNG {row['Ph√≤ng'].upper()}</b>", styles["BillTitle"]))
            elements.append(Spacer(1, 6))

            # N·ªôi dung t·ª´ng d√≤ng
            elements.append(Paragraph(f"Ti·ªÅn ph√≤ng: {format_currency(row['Ti·ªÅn ph√≤ng'])}", styles["Normal"]))
            elements.append(Spacer(1, 6))

            elements.append(Paragraph(f"ƒêi·ªán c≈©: {row['S·ªë ƒëi·ªán c≈©']}", styles["Normal"]))
            elements.append(Paragraph(f"ƒêi·ªán m·ªõi: {row['S·ªë ƒëi·ªán m·ªõi']}", styles["Normal"]))
            elements.append(Paragraph(f"Ti√™u th·ª•: {row['S·ªë ƒëi·ªán s·ª≠ d·ª•ng (kWh)']} kWh", styles["Normal"]))
            elements.append(Paragraph(f"Ti·ªÅn ƒëi·ªán: {format_currency(row['Ti·ªÅn ƒëi·ªán'])}", styles["Normal"]))
            elements.append(Spacer(1, 6))

            elements.append(Paragraph(f"N∆∞·ªõc c≈©: {row['S·ªë n∆∞·ªõc c≈©']}", styles["Normal"]))
            elements.append(Paragraph(f"N∆∞·ªõc m·ªõi: {row['S·ªë n∆∞·ªõc m·ªõi']}", styles["Normal"]))
            elements.append(Paragraph(f"Ti√™u th·ª•: {row['S·ªë n∆∞·ªõc s·ª≠ d·ª•ng (m¬≥)']} m¬≥", styles["Normal"]))
            elements.append(Paragraph(f"Ti·ªÅn n∆∞·ªõc: {format_currency(row['Ti·ªÅn n∆∞·ªõc'])}", styles["Normal"]))
            elements.append(Spacer(1, 6))

            elements.append(Paragraph(f"Ti·ªÅn r√°c: {format_currency(row['Ti·ªÅn r√°c'])}", styles["Normal"]))
            elements.append(Spacer(1, 6))

            elements.append(Paragraph(f"<b>T·ªîNG C·ªòNG:</b>", styles["TotalBold"]))
            elements.append(Paragraph(f"{format_currency(row['T·ªïng ti·ªÅn'])}", styles["TotalNum"]))
            elements.append(Spacer(1, 6))

            # Trang m·ªõi cho m·ªói ph√≤ng
            if idx < len(df_sorted) - 1:
                elements.append(PageBreak())

        doc.build(elements)
        pdf_buffer.seek(0)
        st.download_button(
            "‚¨áÔ∏è T·∫£i PDF (t·∫•t c·∫£ ph√≤ng)",
            pdf_buffer,
            f"Tien_tro_thang_{datetime.now().strftime('%m-%Y')}.pdf",
            "application/pdf"
        )
