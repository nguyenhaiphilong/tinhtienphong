import streamlit as st
import pandas as pd
import re
import io
from datetime import datetime
from reportlab.lib.pagesizes import A4
from reportlab.lib.units import mm
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import (
    SimpleDocTemplate, Paragraph, Spacer, PageBreak, Table, TableStyle
)
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.platypus import KeepTogether

# ===== ƒêƒÇNG K√ù FONT ARIAL =====
pdfmetrics.registerFont(TTFont("Arial", "fonts/arial.ttf"))
pdfmetrics.registerFont(TTFont("Arial-Bold", "fonts/arialbd.ttf"))

# ------------------ Helpers ------------------
def parse_room(name):
    s = str(name).strip()
    m = re.match(r"^(\d+)\s*([A-Za-z]*)$", s)
    if m:
        num = int(m.group(1))
        suf = (m.group(2) or "").upper()
        return num, suf
    return 9999, s

def format_currency(value):
    try:
        v = float(value)
    except:
        return str(value)
    return f"{v:,.0f}ƒë".replace(",", ".")

def build_sort_rank(df):
    # parse num & suffix
    df['__num'] = df['Ph√≤ng'].apply(lambda x: parse_room(x)[0])
    df['__suf'] = df['Ph√≤ng'].apply(lambda x: parse_room(x)[1])
    # l·∫•y danh s√°ch suffix c√≥ (kh√¥ng t√≠nh '')
    suffixes = sorted(list(set([s for s in df['__suf'].unique() if s != ""])))
    # rank map: '' -> 0, suffixes in alphabetical order -> 1,2,3...
    rank_map = {"": 0}
    for i, s in enumerate(suffixes):
        rank_map[s] = i + 1
    df['__rank'] = df['__suf'].map(lambda x: rank_map.get(x, 9999))
    # sort theo rank r·ªìi theo s·ªë
    df_sorted = df.sort_values(['__rank', '__num']).reset_index(drop=True)
    return df_sorted

# ------------------ Session ------------------
if "ds_phong" not in st.session_state:
    st.session_state["ds_phong"] = []

if "config" not in st.session_state:
    st.session_state["config"] = {
        "TIEN_PHONG": 2100000,
        "GIA_DIEN": 3500,
        "GIA_NUOC": 20000,
        "TIEN_RAC": 10000,
        "TIEN_THEM": 300000,
    }

st.title("üè† Qu·∫£n l√Ω ti·ªÅn ph√≤ng tr·ªç")

# ---------- Sidebar: c·∫•u h√¨nh ----------
st.sidebar.header("‚öôÔ∏è C·∫•u h√¨nh gi√°")
st.session_state["config"]["TIEN_PHONG"] = st.sidebar.number_input(
    "üíµ Ti·ªÅn ph√≤ng c·ªë ƒë·ªãnh", min_value=0, step=100000, value=st.session_state["config"]["TIEN_PHONG"]
)
st.session_state["config"]["GIA_DIEN"] = st.sidebar.number_input(
    "üîå Gi√° ƒëi·ªán (ƒë/kWh)", min_value=0, step=100, value=st.session_state["config"]["GIA_DIEN"]
)
st.session_state["config"]["GIA_NUOC"] = st.sidebar.number_input(
    "üö∞ Gi√° n∆∞·ªõc (ƒë/m¬≥)", min_value=0, step=10000, value=st.session_state["config"]["GIA_NUOC"]
)
st.session_state["config"]["TIEN_RAC"] = st.sidebar.number_input(
    "üóëÔ∏è Ti·ªÅn r√°c", min_value=0, step=10000, value=st.session_state["config"]["TIEN_RAC"]
)
st.session_state["config"]["TIEN_THEM"] = st.sidebar.number_input(
    "‚ûï Ti·ªÅn th√™m (ph·ª• ph√≠)", min_value=0, step=100000, value=st.session_state["config"]["TIEN_THEM"]
)

# ---------- Nh·∫≠p d·ªØ li·ªáu ph√≤ng ----------
st.header("‚ûï Nh·∫≠p th√¥ng tin ph√≤ng")

ten_phong = st.text_input("T√™n ph√≤ng")

dien_cu = st.number_input("Ch·ªâ s·ªë ƒëi·ªán c≈©", min_value=0, step=1)
nuoc_cu = st.number_input("Ch·ªâ s·ªë n∆∞·ªõc c≈©", min_value=0, step=1)
dien_moi_input = st.number_input("Ch·ªâ s·ªë ƒëi·ªán m·ªõi", min_value=0, step=1)
# x·ª≠ l√Ω quay v√≤ng: c·ªông 1000 n·∫øu m·ªõi < c≈©
dien_moi_thuc = dien_moi_input if dien_moi_input >= dien_cu else dien_moi_input + 1000
so_dien = max(0, dien_moi_thuc - dien_cu)
tien_dien = so_dien * st.session_state["config"]["GIA_DIEN"]

nuoc_moi_input = st.number_input("Ch·ªâ s·ªë n∆∞·ªõc m·ªõi", min_value=0, step=1)
nuoc_moi_thuc = nuoc_moi_input if nuoc_moi_input >= nuoc_cu else nuoc_moi_input + 1000
so_nuoc = max(0, nuoc_moi_thuc - nuoc_cu)
tien_nuoc = so_nuoc * st.session_state["config"]["GIA_NUOC"]
co_tien_them = st.checkbox(f"C√≥ th√™m ph·ª• ph√≠")
tien_them = st.session_state["config"]["TIEN_THEM"] if co_tien_them else 0

tong = st.session_state["config"]["TIEN_PHONG"] + tien_dien + tien_nuoc + st.session_state["config"]["TIEN_RAC"] + tien_them

if st.button("üíæ L∆∞u ph√≤ng"):
    if ten_phong.strip() == "":
        st.warning("‚ö†Ô∏è B·∫°n ph·∫£i nh·∫≠p t√™n ph√≤ng tr∆∞·ªõc khi l∆∞u!")
    else:
        record = {
            "Ph√≤ng": ten_phong.strip(),
            "Ti·ªÅn ph√≤ng": st.session_state["config"]["TIEN_PHONG"],
            "ƒê∆°n gi√° ƒëi·ªán": st.session_state["config"]["GIA_DIEN"],
            "S·ªë ƒëi·ªán c≈©": dien_cu,
            "S·ªë ƒëi·ªán m·ªõi": dien_moi_input,
            "S·ªë ƒëi·ªán s·ª≠ d·ª•ng (kWh)": so_dien,
            "Ti·ªÅn ƒëi·ªán": tien_dien,
            "ƒê∆°n gi√° n∆∞·ªõc": st.session_state["config"]["GIA_NUOC"],
            "S·ªë n∆∞·ªõc c≈©": nuoc_cu,
            "S·ªë n∆∞·ªõc m·ªõi": nuoc_moi_input,
            "S·ªë n∆∞·ªõc s·ª≠ d·ª•ng (m¬≥)": so_nuoc,
            "Ti·ªÅn n∆∞·ªõc": tien_nuoc,
            "Ti·ªÅn r√°c": st.session_state["config"]["TIEN_RAC"],
            "Ti·ªÅn th√™m": tien_them,
            "T·ªïng ti·ªÅn": tong
        }
        # c·∫≠p nh·∫≠t n·∫øu tr√πng t√™n (ghi ƒë√®) ho·∫∑c th√™m m·ªõi
        found = False
        for i, p in enumerate(st.session_state["ds_phong"]):
            if p["Ph√≤ng"].lower() == ten_phong.lower():
                st.session_state["ds_phong"][i] = record
                found = True
                st.info(f"‚úèÔ∏è ƒê√£ c·∫≠p nh·∫≠t l·∫°i th√¥ng tin ph√≤ng {ten_phong}")
                break
        if not found:
            st.session_state["ds_phong"].append(record)
            st.success(f"‚úÖ ƒê√£ l∆∞u ph√≤ng {ten_phong}")

# ---------- Hi·ªÉn th·ªã & xu·∫•t ----------
if st.session_state["ds_phong"]:
    df = pd.DataFrame(st.session_state["ds_phong"])
    df_sorted = build_sort_rank(df)
    df_display = df_sorted.copy()
    money_cols = ["Ti·ªÅn ph√≤ng", "ƒê∆°n gi√° ƒëi·ªán", "Ti·ªÅn ƒëi·ªán", "ƒê∆°n gi√° n∆∞·ªõc", "Ti·ªÅn n∆∞·ªõc", "Ti·ªÅn r√°c", "Ti·ªÅn th√™m",  "T·ªïng ti·ªÅn"]
    for col in money_cols:
        if col in df_display.columns:
            df_display[col] = df_display[col].apply(format_currency)

    st.header("üìä B·∫£ng t·ªïng h·ª£p ti·ªÅn ph√≤ng (ƒë√£ s·∫Øp x·∫øp theo quy t·∫Øc)")
    st.dataframe(df_display.drop(columns=['__num','__suf','__rank'], errors='ignore'))

    # t·ªïng
    tong_tien_all = df_sorted["T·ªïng ti·ªÅn"].sum()
    st.subheader(f"üí∞ T·ªïng thu t·∫•t c·∫£ ph√≤ng: {format_currency(tong_tien_all)}")

    # ----- Xu·∫•t PDF cho t·∫•t c·∫£ ph√≤ng -----
    if st.button("üßæ Xu·∫•t H√≥a ƒê∆°n (T·∫•t c·∫£ c√°c ph√≤ng)"):
        pdf_buffer = io.BytesIO()
        thermal_width = 58 * mm
        thermal_height = 107 * mm
        doc = SimpleDocTemplate(
            pdf_buffer,
            pagesize=(thermal_width, thermal_height),
            leftMargin=5 * mm,
            rightMargin=5 * mm,
            topMargin=2 * mm,
            bottomMargin=5 * mm
        )
        elements = []

        # Style setup
        styles = getSampleStyleSheet()
        styles["Normal"].fontName = "Arial"
        styles["Normal"].fontSize = 10
        styles["Normal"].spaceAfter = 0
        styles.add(ParagraphStyle(name="Date", fontName="Arial", fontSize=11, alignment=1, spaceAfter=8))
        styles.add(ParagraphStyle(name="BillTitle", fontName="Arial-Bold", fontSize=13, alignment=1, spaceAfter=8))
        styles.add(ParagraphStyle(name="TotalBold", fontName="Arial-Bold", fontSize=12, alignment=1, spaceAfter=8))
        styles.add(ParagraphStyle(name="TotalNum", fontName="Arial-Bold", fontSize=16, alignment=1, spaceAfter=8))

        # duy·ªát theo df_sorted ƒë·ªÉ ƒë·∫£m b·∫£o th·ª© t·ª± ƒë√∫ng
        for idx, row in df_sorted.iterrows():
            # Ti√™u ƒë·ªÅ
            elements.append(Paragraph(f"<b>PHI·∫æU THU TI·ªÄN PH√íNG {row['Ph√≤ng'].upper()}</b>", styles["BillTitle"]))
            elements.append(Spacer(1, 6))

            # N·ªôi dung t·ª´ng d√≤ng
            elements.append(Paragraph(f"Ng√†y: {datetime.now().strftime('%d/%m/%Y')}", styles["Date"]))
            elements.append(Spacer(1, 6))

            # B·∫£ng chi ti·∫øt
            data = [
                ["T√™n DV", "T.th·ª•", "T.Ti·ªÅn"],
                ["T.Ph√≤ng", "", format_currency(row["Ti·ªÅn ph√≤ng"])],
                ["ƒêi·ªán", f"{row['S·ªë ƒëi·ªán s·ª≠ d·ª•ng (kWh)']}x{format_currency(row['ƒê∆°n gi√° ƒëi·ªán'])}", format_currency(row["Ti·ªÅn ƒëi·ªán"])],
                ["N∆∞·ªõc", f"{row['S·ªë n∆∞·ªõc s·ª≠ d·ª•ng (m¬≥)']}x{format_currency(row['ƒê∆°n gi√° n∆∞·ªõc'])}", format_currency(row["Ti·ªÅn n∆∞·ªõc"])],
                ["R√°c", "", format_currency(row["Ti·ªÅn r√°c"])],
            ]
            if row.get("Ti·ªÅn th√™m", 0) > 0:
                data.append(["Ph·ª• ph√≠", "", format_currency(row["Ti·ªÅn th√™m"])])
            
            table = Table( data, colWidths=[17*mm, 19*mm, 22*mm])
            
            table.setStyle(TableStyle([
                ("FONTNAME", (0,0), (-1,-1), "Arial"),
                ("FONTSIZE", (0,0), (-1,-1), 9.8),
                ("ALIGN", (0,0), (0,-1), "LEFT"),
                ("ALIGN", (1,0), (1,-1), "CENTER"),
                ("ALIGN", (2,0), (2,-1), "RIGHT"),
                ("LINEBELOW", (0,0), (-1,0), 0.5, colors.black),
                ("LINEAFTER", (0,0), (0,-1), 0.25, colors.black),
                ("LINEAFTER", (1,0), (1,-1), 0.25, colors.black),
                ]))
            
            elements.append(table)
            elements.append(Spacer(1, 6))
            
            elements.append(Paragraph(f"<b>T·ªîNG C·ªòNG:</b>", styles["TotalBold"]))
            elements.append(Paragraph(f"{format_currency(row['T·ªïng ti·ªÅn'])}", styles["TotalNum"]))
            elements.append(Spacer(1, 6))

            data1 = [
                ["", "C≈©", "M·ªõi"],
                ["ƒêi·ªán", f"{row['S·ªë ƒëi·ªán c≈©']}", f"{row['S·ªë ƒëi·ªán m·ªõi']}"],
                ["N∆∞·ªõc", f"{row['S·ªë n∆∞·ªõc c≈©']}", f"{row['S·ªë n∆∞·ªõc m·ªõi']}"]
            ]
            table1 = Table( data1, colWidths=[15*mm, 17*mm, 18*mm])
            table1.setStyle(TableStyle([
                ("FONTNAME", (0,0), (-1,-1), "Arial"),
                ("FONTSIZE", (0,0), (-1,-1), 10),
                ("ALIGN", (0,0), (0,-1), "LEFT"),
                ("ALIGN", (1,0), (1,-1), "CENTER"),
                ("ALIGN", (2,0), (2,-1), "RIGHT"),
                ("LINEBELOW", (0,0), (-1,0), 0.5, colors.black),
            ]))
            elements.append(KeepTogether(table1))
            elements.append(Spacer(1, 6))
            
            # Trang m·ªõi cho m·ªói ph√≤ng
            if idx < len(df_sorted) - 1:
                elements.append(PageBreak())

        doc.build(elements)
        pdf_buffer.seek(0)
        st.download_button(
            "‚¨áÔ∏è T·∫£i H√≥a ƒê∆°n",
            pdf_buffer,
            f"Tien_tro_thang_{datetime.now().strftime('%m-%Y')}.pdf",
            "application/pdf"
        )
    # ----- Xu·∫•t PDF t·ªïng h·ª£p ti·ªÅn ph√≤ng -----
    if st.button("üßæ Xu·∫•t t·ªïng h·ª£p ti·ªÅn ph√≤ng"):
        pdf_buffer1 = io.BytesIO()
        thermal_width = 58 * mm
        thermal_height = 107 * mm
        doc1 = SimpleDocTemplate(
            pdf_buffer1,
            pagesize=(thermal_width, thermal_height),
            leftMargin=5 * mm,
            rightMargin=5 * mm,
            topMargin=2 * mm,
            bottomMargin=5 * mm
        )
        elements1 = []
        styles = getSampleStyleSheet()
        styles["Normal"].fontName = "Arial"
        styles["Normal"].fontSize = 10
        styles["Normal"].spaceAfter = 0
        styles.add(ParagraphStyle(name="Mytitle", fontName="Arial-Bold", fontSize=13, alignment=1, spaceAfter=8))
        elements1.append(Paragraph(f"DANH S√ÅCH TI·ªÄN PH√íNG - {datetime.now().strftime('%m/%Y')}", styles["Mytitle"]))
        elements1.append(Spacer(1, 12))
        data_summary = [["Ph√≤ng", "Ti·ªÅn ph√≤ng", "Ghi ch√∫"]]
        for idx, row in df_sorted.iterrows():
            data_summary.append([
                row["Ph√≤ng"],
                format_currency(row["T·ªïng ti·ªÅn"]),
                " "  # Ghi ch√∫ ƒë·ªÉ tr·ªëng
            ])
        table_sum = Table( data_summary, colWidths=[15*mm, 25*mm, 18*mm])
        table_sum.setStyle(TableStyle([
            ("FONTNAME", (0,0), (-1,-1), "Arial"),
            ("FONTSIZE", (0,0), (-1,-1), 11),
            ("ALIGN", (0,0), (0,-1), "CENTER"),
            ("ALIGN", (1,1), (1,-1), "RIGHT"),
            ("ALIGN", (2,1), (2,-1), "LEFT"),
            ("LINEBELOW", (0,0), (-1,0), 0.5, colors.black),
            ("INNERGRID", (0,0), (-1,-1), 0.25, colors.grey),
            ("BOX", (0,0), (-1,-1), 0.5, colors.black),
        ]))
        elements1.append(table_sum)
        elements1.append(Spacer(1, 12))
        doc1.build(elements1)
        pdf_buffer1.seek(0)
        st.download_button(
            "‚¨áÔ∏è T·∫£i PDF Danh s√°ch",
            pdf_buffer1,
            f"Bang_tong_tien_thang_{datetime.now().strftime('%m-%Y')}.pdf",
            "application/pdf"
        )
        

# ----- Xu·∫•t Excel -----
if st.button("üì• Xu·∫•t Excel qu·∫£n l√≠"):
    if not st.session_state["ds_phong"]:
        st.warning("‚ö†Ô∏è Ch∆∞a c√≥ d·ªØ li·ªáu ph√≤ng, kh√¥ng th·ªÉ xu·∫•t Excel!")
    else:
        excel_buffer = io.BytesIO()
        with pd.ExcelWriter(excel_buffer, engine="openpyxl") as writer:
            # ---- Sheet 1: ƒêi·ªán n∆∞·ªõc ----
            df_sheet1 = pd.DataFrame({
                "Ph√≤ng": df_sorted["Ph√≤ng"],
                "ƒêi·ªán - C≈©": df_sorted["S·ªë ƒëi·ªán c≈©"],
                "ƒêi·ªán - M·ªõi": df_sorted["S·ªë ƒëi·ªán m·ªõi"],
                "ƒêi·ªán - Ti√™u th·ª•": df_sorted["S·ªë ƒëi·ªán s·ª≠ d·ª•ng (kWh)"],
                "N∆∞·ªõc - C≈©": df_sorted["S·ªë n∆∞·ªõc c≈©"],
                "N∆∞·ªõc - M·ªõi": df_sorted["S·ªë n∆∞·ªõc m·ªõi"],
                "N∆∞·ªõc - Ti√™u th·ª•": df_sorted["S·ªë n∆∞·ªõc s·ª≠ d·ª•ng (m¬≥)"],
            })
            df_sheet1.to_excel(writer, index=False, sheet_name="Qu·∫£n l√≠ ƒëi·ªán - n∆∞·ªõc")

            # ---- Sheet 2: Qu·∫£n l√≠ ti·ªÅn ph√≤ng ----
            df_sheet2 = pd.DataFrame({
                "Ph√≤ng": df_sorted["Ph√≤ng"],
                "Ti·ªÅn ph√≤ng": df_sorted["T·ªïng ti·ªÅn"].apply(format_currency),
                "Ghi ch√∫": ["" for _ in range(len(df_sorted))],
            })
            df_sheet2.to_excel(writer, index=False, sheet_name="Qu·∫£n l√≠ ti·ªÅn ph√≤ng")

        excel_buffer.seek(0)
        st.download_button(
            "‚¨áÔ∏è T·∫£i Excel",
            excel_buffer,
            f"Quan_li_phong_tro_thang_{datetime.now().strftime('%m-%Y')}.xlsx",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
